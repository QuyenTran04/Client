import React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
} from "react-hook-form"

import { cn } from "../../lib/utils"
import { Label } from "./label"

// üßæ Component cha c·ªßa to√†n b·ªô form (d√πng context c·ªßa react-hook-form)
const Form = FormProvider

// üß† Context ƒë·ªÉ l∆∞u t√™n c·ªßa t·ª´ng tr∆∞·ªùng trong form
const FormFieldContext = React.createContext({})

// üîπ Component ƒë·∫°i di·ªán cho m·ªôt tr∆∞·ªùng trong form (field)
const FormField = (props) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

// ‚öôÔ∏è Hook gi√∫p l·∫•y th√¥ng tin c·ªßa m·ªôt field trong form (VD: l·ªói, id,...)
const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("‚ö†Ô∏è useFormField ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng b√™n trong <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

// üß± Context c·ªßa t·ª´ng ph·∫ßn t·ª≠ form (FormItem)
const FormItemContext = React.createContext({})

// üîπ M·ªôt nh√≥m ph·∫ßn t·ª≠ trong form (label, input, m√¥ t·∫£, l·ªói)
function FormItem({ className, ...props }) {
  const id = React.useId() // T·∫°o id duy nh·∫•t cho m·ªói ph·∫ßn t·ª≠

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

// üè∑Ô∏è Nh√£n (Label) c·ªßa √¥ nh·∫≠p li·ªáu
function FormLabel({ className, ...props }) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

// üß© V√πng ch·ª©a ph·∫ßn ƒëi·ªÅu khi·ªÉn nh·∫≠p li·ªáu (Input, Select, Textarea,...)
function FormControl(props) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

// üìù M√¥ t·∫£ nh·ªè b√™n d∆∞·ªõi √¥ nh·∫≠p
function FormDescription({ className, ...props }) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

// ‚ö†Ô∏è Th√¥ng b√°o l·ªói khi nh·∫≠p sai
function FormMessage({ className, ...props }) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) return null

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

// üöÄ Xu·∫•t c√°c component ƒë·ªÉ d√πng n∆°i kh√°c
export {
  useFormField,     // Hook ƒë·ªÉ l·∫•y th√¥ng tin field
  Form,             // Component form t·ªïng th·ªÉ
  FormItem,         // M·ªôt ph·∫ßn t·ª≠ trong form
  FormLabel,        // Nh√£n label
  FormControl,      // V√πng ƒëi·ªÅu khi·ªÉn input
  FormDescription,  // M√¥ t·∫£ nh·ªè
  FormMessage,      // Th√¥ng b√°o l·ªói
  FormField,        // Field c√≥ logic validation
}
